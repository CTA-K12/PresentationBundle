{
  "name": "almond",
  "description": "A minimal AMD API implementation for use in optimized browser builds.",
  "version": "0.3.3",
  "homepage": "http://github.com/requirejs/almond",
  "author": {
    "name": "James Burke",
    "email": "jrburke@gmail.com",
    "url": "http://github.com/jrburke"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/requirejs/almond.git"
  },
  "license": "MIT",
  "main": "almond.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "devDependencies": {
    "connect": "^3.3.4",
    "serve-static": "^1.9.1"
  },
  "readme": "#almond\n\nA replacement [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) loader for\n[RequireJS](http://requirejs.org). It provides a minimal AMD API footprint that includes [loader plugin](http://requirejs.org/docs/plugins.html) support. Only useful for built/bundled AMD modules, does not do dynamic loading.\n\n## Why\n\nSome developers like to use the AMD API to code modular JavaScript, but after doing an optimized build,\nthey do not want to include a full AMD loader like RequireJS, since they do not need all that functionality.\nSome use cases, like mobile, are very sensitive to file sizes.\n\nBy including almond in the built file, there is no need for RequireJS.\nalmond is around **1 kilobyte** when minified with Closure Compiler and gzipped.\n\nSince it can support certain types of loader plugin-optimized resources, it is a great\nfit for a library that wants to use [text templates](http://requirejs.org/docs/api.html#text)\nor [CoffeeScript](https://github.com/requirejs/require-cs) as part of\ntheir project, but get a tiny download in one file after using the\n[RequireJS Optimizer](http://requirejs.org/docs/optimization.html).\n\nIf you are building a library, the wrap=true support in the RequireJS optimizer\nwill wrap the optimized file in a closure, so the define/require AMD API does not\nescape the file. Users of your optimized file will only see the global API you decide\nto export, not the AMD API. See the usage section below for more details.\n\nSo, you get great code cleanliness with AMD and the use of powerful loader plugins\nin a tiny wrapper that makes it easy for others to use your code even if they do not use AMD.\n\nIf you want a single file build output but without the module APIs included, you might want to consider [AMDclean](https://github.com/gfranko/amdclean).\n\n## Restrictions\n\nIt is best used for libraries or apps that use AMD and:\n\n* optimize all the modules into one file -- no dynamic code loading.\n* all modules have IDs and dependency arrays in their define() calls -- the RequireJS optimizer will take care of this for you.\n* only have **one** requirejs.config() or require.config() call.\n* the requirejs.config/require.config call needs to be included in the build output. This is particularly important for making sure any [map config](http://requirejs.org/docs/api.html#config-map) use still works.\n* do not use the `var require = {};` style of [passing config](http://requirejs.org/docs/api.html#config).\n* do not use [RequireJS multiversion support/contexts](http://requirejs.org/docs/api.html#multiversion).\n* do not use require.toUrl() or require.nameToUrl().\n* do not use [packages/packagePaths config](http://requirejs.org/docs/api.html#packages). If you need to use packages that have a main property, [volo](https://github.com/volojs/volo) can create an adapter module so that it can work without this config. Use the `amdify add` command to add the dependency to your project.\n\nWhat is supported:\n\n* dependencies with relative IDs.\n* define('id', {}) definitions.\n* define(), require() and requirejs() calls.\n* loader plugins that can inline their resources into optimized files, and\ncan access those inlined resources synchronously after the optimization pass.\nThe [text](http://requirejs.org/docs/api.html#text) and\n[CoffeeScript](https://github.com/requirejs/require-cs) plugins are two such plugins.\n\n## Download\n\n[Latest release](https://github.com/requirejs/almond/raw/latest/almond.js)\n\n\n## Usage\n\n[Download the RequireJS optimizer](http://requirejs.org/docs/download.html#rjs).\n\n[Download the current release of almond.js](https://github.com/requirejs/almond/raw/latest/almond.js).\n\nRun the optimizer using [Node](http://nodejs.org) (also [works in Java](https://github.com/requirejs/r.js/blob/master/README.md)):\n\n    node r.js -o baseUrl=. name=path/to/almond include=main out=main-built.js wrap=true\n\nThis assumes your project's top-level script file is called main.js and the command\nabove is run from the directory containing main.js. If you prefer to use a build.js build profile instead of command line arguments, [this RequireJS optimization section](http://requirejs.org/docs/optimization.html#pitfalls) has info on how to do that.\n\nwrap=true will add this wrapper around the main-built.js contents (which will be minified by UglifyJS:\n\n    (function () {\n        //almond will be here\n        //main and its nested dependencies will be here\n    }());\n\nIf you do not want that wrapper, leave off the wrap=true argument.\n\nThese optimizer arguments can also be used in a build config object, so it can be used\nin [runtime-generated server builds](https://github.com/requirejs/r.js/blob/master/build/tests/http/httpBuild.js).\n\n\n## Triggering module execution <a name=\"execution\"></a>\n\nAs of RequireJS 2.0 and almond 0.1, modules are only executed if they are\ncalled by a top level require call. The data-main attribute on a script tag\nfor require.js counts as a top level require call.\n\nHowever with almond, it does not look for a data-main attribute, and if your\nmain JS module does not use a top level require() or requirejs() call to\ntrigger module loading/execution, after a build, it may appear that the code\nbroke -- no modules execute.\n\nThe 2.0 RequireJS optimizer has a build config, option **insertRequire** that you\ncan use to specify that a require([]) call is inserted at the end of the built\nfile to trigger module loading. Example:\n\n    node r.js -o baseUrl=. name=path/to/almond.js include=main insertRequire=main out=main-built.js wrap=true\n\nor, if using a build config file:\n\n```javascript\n{\n    baseUrl: '.',\n    name: 'path/to/almond',\n    include: ['main'],\n    insertRequire: ['main'],\n    out: 'main-built.js',\n    wrap: true\n}\n```\n\nThis will result with `require([\"main\"]);` at the bottom of main-built.js.\n\n## Exporting a public API\n\nIf you are making a library that is made up of AMD modules in source form, but will be built with almond into one file, and you want to export a small public\nAPI for that library, you can use the `wrap` build config to do so. Build\nconfig:\n\n```javascript\n{\n    baseUrl: '.',\n    name: 'path/to/almond',\n    include: ['main'],\n    out: 'lib-built.js',\n    wrap: {\n        startFile: 'path/to/start.frag',\n        endFile: 'path/to/end.frag'\n    }\n}\n```\n\nWhere start.frag could look like this:\n\n```javascript\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case. Just assign the\n        //result to a property on the global.\n        root.libGlobalName = factory();\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n```\n\nand end.frag is like this:\n```javascript\n    //The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('main');\n}));\n```\n\nAfter the build, then the built file should be structured like so:\n\n* start.frag\n* almond.js\n* modules for your lib, including 'main'\n* end.frag\n\n## License\n\nMIT\n\n## Code of Conduct\n\n[jQuery Foundation Code of Conduct](https://jquery.org/conduct/).\n\n## Common errors\n\nExplanations of common errors:\n\n### incorrect module build, no module name\n\nIn almond 3.0.0 and earlier, this would show up as \"deps is undefined\", where\nthis line is mentioned:\n\n    if (!deps.splice) {\n\nIn 3.0.1+ the error is explicitly: \"incorrect module build, no module name\".\n\nThis means that there is a define()'d module, but it is missing a name,\nsomething that looks like this:\n\n    define(function () {});\n    //or\n    define([], function () {});\n\n\nwhen it should look like:\n\n    define('someName', function () {});\n    //or\n    define('someName', [], function () {});\n\n\nThis is usually a sign that the tool you used to combine all the modules\ntogether did not properly name an anonymous AMD module.\n\nMultiple modules built into a single file **must** have names in the define calls.\nOtherwise almond has no way to assign the module to a name key for use in the code.\n\nThe fix is to use a build tool that understand AMD modules and inserts the module\nIDs in the build. The\n[requirejs optimizer](http://requirejs.org/docs/optimization.html) is a build tool\nthat can do this correctly.\n\n### x missing y\n\nIt means that module 'x' asked for module 'y', but module 'y' was not available.\n\nThis usually means that 'y' was not included in the built file that includes almond.\n\nalmond can only handle modules built in with it, it cannot dynamically load\nmodules from the network.\n\n\n### No y\n\nIt means that a `require('y')` call was done but y was not available.\n\nThis usually means that 'y' was not included in the built file that includes almond.\n\nalmond can only handle modules built in with it, it cannot dynamically load\nmodules from the network.\n\n## How to get help\n\n* Open issues in the [issue tracker](https://github.com/requirejs/almond/issues).\n\n## Contributing\n\nAlmond follows the\n[same contribution model as requirejs](http://requirejs.org/docs/contributing.html)\nand is considered a sub-project of requirejs.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/requirejs/almond/issues"
  },
  "_id": "almond@0.3.3",
  "dist": {
    "shasum": "ab1f94d1d23851989d1b5f7eee1825418a672195"
  },
  "_from": "almond@~0.3.1",
  "_resolved": "https://registry.npmjs.org/almond/-/almond-0.3.3.tgz"
}
