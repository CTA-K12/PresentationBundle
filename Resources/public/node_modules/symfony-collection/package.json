{
  "name": "symfony-collection",
  "version": "2.0.4",
  "homepage": "http://symfony-collection.fuz.org",
  "description": "A jQuery plugin that manages adding, deleting and moving elements from a Symfony2 collection",
  "keywords": [
    "jquery",
    "symfony",
    "collection",
    "plugin",
    "javascript"
  ],
  "author": {
    "name": "Alain Tiemblo"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ninsuo/symfony-collection.git"
  },
  "bugs": {
    "url": "https://github.com/ninsuo/symfony-collection/issues"
  },
  "license": "MIT",
  "ignore": [
    "*",
    "!jquery.collection.js",
    "!jquery.collection.html.twig"
  ],
  "dependencies": {
    "jquery": ">=1.7",
    "jquery-ui": ">=1.0"
  },
  "readme": "# symfony-collection\nA jQuery plugin that manages adding, deleting and moving elements from a Symfony collection\n\nThis is not really difficult to manage your collections using the `data-prototype` Symfony provides. But\nafter using several times collections, it appeared useful to me to create a jQuery plugin to do this job.\n\nThis is even more true when you need your elements to be moved up and down or added at a specific position: as the\nform will be proceeded using field names, we should swap field contents or field names instead of moving fields themselves to get the job done. That's\nnot really friendly in javascript, so this plugin also aims to deal with that.\n\n![sample](http://ocarina.fr/medias/duplicate.png)\n\n# Live demo\n\nDemo of this plugin is available live at: http://symfony-collection.fuz.org\n\nDemo source code is here: https://github.com/ninsuo/symfony-collection-demo\n\n# Basic usage\n\nYour collection type should contain `prototype`, `allow_add`, `allow_remove` options (depending on which buttons\nyou require of course). And a class that will be used as a selector to run the collection plugin.\n\n```php\n->add('myCollection', 'collection',\n   array (\n        // ...\n        'allow_add' => true,\n        'allow_remove' => true,\n        'prototype' => true,\n        'attr' => array(\n                'class' => 'my-selector',\n        ),\n))\n```\n\nThen, render your form after applying the given custom theme:\n\n```jinja\n     {% form_theme myForm 'AcmeDemoBundle::jquery.collection.html.twig' %}\n     {{ form(myForm) }}\n```\n\nFinally, put the following code at the bottom of your page.\n\n```html\n    <script src=\"{{ asset('js/jquery.js') }}\"></script>\n    <script src=\"{{ asset('bundles/acmedemo/js/jquery.collection.js') }}\"></script>\n\n    <script type=\"text/javascript\">\n        $('.my-selector').collection();\n    </script>\n```\n\n**Notes**\n\nIf you don't want to use the form theme, you should set the `name_prefix` option manually (see below).\n\nIf you want to use the form theme, but already use one, you can use both with:\n\n```jinja\n     {%\n        form_theme myForm\n            'AcmeDemoBundle::jquery.collection.html.twig'\n            'AcmeDemoBundle::my-own-form-theme.html.twig'\n     %}\n```\n\n# Options\n\n**Customize rendered links**\n\nYou can customize displayed links by setting `up`, `down`, `add`, `remove`and `duplicate` options.\n\nDefault values are:\n\n```js\n     $('.collection').collection({\n         up: '<a href=\"#\">&#x25B2;</a>',\n         down: '<a href=\"#\">&#x25BC;</a>',\n         add: '<a href=\"#\">[ + ]</a>',\n         remove: '<a href=\"#\">[ - ]</a>',\n         duplicate: '<a href=\"#\">[ # ]</a>'\n     });\n```\n\n**Disable links**\n\nYou can disable some buttons by using `allow_up`, `allow_down`, `allow_add`, `allow_remove`\nand `allow_duplicate` options. By default, all buttons except `duplicate` are enabled.\n\nFor example, if you do not want your elements to be moved up and down, use:\n\n```js\n     $('.collection').collection({\n         allow_up: false,\n         allow_down: false\n     });\n```\n\nIf you are using the given form theme, `allow_add`, `allow_remove` and `allow_duplicate` are automatically\nset following your form type configuration.\n\n**Set minimum and maximum of elements in the collection**\n\nYou can set the minimum of elements allowed in the collection by using the `min` option. By default, it is disabled (set to 0).\n\n```js\n     $('.collection').collection({\n         min: 0\n     });\n```\n\nYou can set the maximum of elements allowed in the collection by using the `max` option. By default, it is set to 100.\n\n```js\n     $('.collection').collection({\n         max: 100\n     });\n```\n\nYou can initialize your collection with a minimum of elements created (even if they do not exist on the data object).\n\n```js\n     $('.collection').collection({\n         init_with_n_elements: 3\n     });\n```\n\n**Only one add button at the bottom**\n\nIf you prefer having only one `add` button at the bottom of the collection instead of one add button per collection element, use the `add_at_the_end` option:\n\n```js\n     $('.collection').collection({\n         add_at_the_end: true\n     });\n```\n\n**Customise add button location**\n\nIf you want to set a specific location for your add button (not close to each collection element, nor at the bottom of the collection),\nyou can use the `custom_add_location` option.\n\nJS:\n```js\n        $('.collectionA').collection({\n            custom_add_location: true\n        });\n```\n\nHTML:\n```html\n        <button \n            data-collection=\"collectionA\" \n            class=\"collection-action collection-add btn btn-success\"\n        >Add element to collection</button>\n```\n\n**Hide useless buttons**\n\nBy default, `move up` button is hidden on the first item, and `move down` button on the last one. You can make them appear\nanyway by setting `hide_useless_buttons` to `false`. This can be useful if you want to beautify them using CSS, for example.\n\n```js\n     $('.collection').collection({\n         hide_useless_buttons: true\n     });\n```\n\n**Events**\n\nThere are `before_*` and `after_*` options that let you put callbacks before and after adding, deleting or moving\nelements in the collection.\n\n- `before_up`, `before_down`, `before_add` and `before_remove` are called before modifying the collection.\nThe modification will be cancelled if the callback you given returned `false`, and will proceed if it returned `true`\nor `undefined`.\n\n- `after_up`, `after_down`, `after_add` and `after_remove` are called after modifying the collection.\nThe modification will be reverted if the callback you given returned `false`.\n\n- `before_init` and `after_init` are called when a collection is initialized. No return value are expected.\n\nCallback functions receive 2 arguments:\n\n- `collection` references the div that contains your whole collection (the symfony2 field)\n\n- `element` is the element in the collection that have been added (or moved/deleted)\n\n```js\n     $('.collection').collection({\n         after_add: function(collection, element) {\n            // automatic backup or whatever\n            return true;\n         }\n     });\n```\n\n**Using the plugin without form theme**\n\nThe form theme aims to reduce the number of options required when activating the plugin. This is really useful\nwhen you are dealing with collections of form collections. But you can still do it manually if you want, using the\nfollowing equivalents:\n\n```js\n    $('.my-selector').collection({\n        prototype_name: '{{ myForm.myCollection.vars.prototype.vars.name }}',\n        allow_add: false,\n        allow_remove: false,\n        name_prefix:  '{{ myForm.myCollection.vars.full_name }}'\n    });\n```\n\nNote that only `name_prefix` option is mandatory, all other ones have default values.\n\n**Drag & drop support**\n\nIf you are using Jquery UI and have the `sortable` component available in your application, the `drag_drop` option is\nautomatically enabled and let you change your element positions using drag & drop. You can disable this behavior by explicitely\nsetting `drag_drop` option to false.\n\nIf required, you can customize `sortable` by overloading options given to `jQuery.ui.sortable` using the `drag_drop_options` option.\n\nBy default, your collection is initialized with the following options:\n\n```js\n     $('.collection').collection({\n         drag_drop: true,\n         drag_drop_options: {\n            placeholder: 'ui-state-highlight'\n         }\n     });\n```\n\nNote that you should not overload `start` and `update` callbacks as they are used by this plugin, see\n`drag_drop_start` and `drag_drop_update` options in advanced usage below for more details.\n\n# Advanced usage\n\n**Changing action's positions**\n\nBy default :\n- `add`, `move up`, `move down` and `remove`are located in this order below each collection's element\n- `add` button can be located at the bottom of the collection using `add_at_the_bottom` option\n\nYou can change those button's positions by creating them manually anywhere in your form theme.\n\nYou can use any custom clickable element as soon has it has one action class:\n- `collection-add` for an `add` button\n- `collection-remove` for a `remove` button\n- `collection-up` for a `move up` button\n- `collection-down` for a `move down` button\n\n*Warning*: `collection` is taken from the `prefix` option: if you change the plugin's prefix, you should change this class too.\n\nExample:\n\nIf we have a collection of text fields and want to display actions at the right side of each value instead of below,\nwe will use something like this:\n\n```jinja\n{% block MyType_label %}{% endblock %}\n{% block MyType_errors %}{% endblock %}\n\n{% block MyType_widget %}\n\n    <div class=\"row\">\n        <div class=\"col-md-8\">\n            {{ form_widget(form.value) }}\n        </div>\n        <div class=\"col-md-2\">\n            <a href=\"#\" class=\"collection-up btn btn-default\">Move up</a>\n            <a href=\"#\" class=\"collection-down btn btn-default\">Move Down</a>\n        </div>\n        <div class=\"col-md-2\">\n            <a href=\"#\" class=\"collection-remove btn btn-default\">Remove</a>\n            <a href=\"#\" class=\"collection-add btn btn-default\">Add</a>\n        </div>\n    </div>\n\n{% endblock %}\n```\n\n*Note* : do not forget to set the `add` option when enabling the plugin, because if your collection is emptied,\nthe plugin will generate an `add` button based on the plugin's configuraiton.\n\n*Tip*: when `add` buttons are put inside collection's elements, new element is created next to the clicked\nelement instead of at the end of the collection.\n\n**Advanced drag & drop support**\n\nIf you need to listen for `start` and/or `update` events from `jQuery.ui.sortable` in your collection,\nyou should not overload the `start` and `update` options in `drag_drop_options`, but use the built-in\n`drag_drop_start` and `drag_drop_update` options instead:\n\n```js\n     $('.collection').collection({\n         drag_drop_start: function (event, ui, elements, element) {\n            // ...\n         },\n         drag_drop_update: function (event, ui, elements, element) {\n            // ...\n         }\n     });\n```\n\nNotes:\n\n- `event` and `ui` come from `jQuery.ui.sortable` `start` callback.\n- `elements` contains all elements from the impacted collection\n- `element` is the moved element in the collection\n- If your callback return false, the position change will be cancelled/reverted.\n\n**Collection of collections**\n\nThis plugin has the ability to manage collection of form collections, but to avoid collisions, you should:\n\nIn your form type:\n\n- set a distinct `prototype_name` option and selector class for each of your collections\n\n```php\n    ->add('collections', 'collection',\n       array (\n            'type' => 'collection',\n            'label' => 'Add, move, remove collections',\n            'options' => array (\n                    'type' => 'text',\n                    'label' => 'Add, move, remove values',\n                    'options' => array (\n                            'label' => 'Value',\n                    ),\n                    'allow_add' => true,\n                    'allow_remove' => true,\n                    'prototype' => true,\n                    'prototype_name' => '__children_name__',\n                    'attr' => array (\n                            'class' => \"child-collection\",\n                    ),\n            ),\n            'allow_add' => true,\n            'allow_remove' => true,\n            'prototype' => true,\n            'prototype_name' => '__parent_name__',\n            'attr' => array (\n                    'class' => \"parent-collection\",\n            ),\n    ))\n```\n\nIn the plugin options:\n\n- use a distinct collection prefix, so clicking `add` button on a collection will add an item to the right collection\n\n- define children's selector in the `selector` attribute of `children` option (must select the root node of your children collections)\n\n```js\n     $('.parent-collection').collection({\n         prefix: 'parent',\n         children: [{\n             selector: '.child-collection',\n             prefix: 'child',\n             ...\n         }]\n     });\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "symfony-collection@2.0.4",
  "dist": {
    "shasum": "ae99439f9ef1f0494f7eac1aa5f29033f4c402cd"
  },
  "_from": "symfony-collection@2.0.4",
  "_resolved": "https://registry.npmjs.org/symfony-collection/-/symfony-collection-2.0.4.tgz"
}
